name: OS/BLAS test matrix

on: push

jobs:
  build-pip:
    name: Build pip Py${{ matrix.python }}, ${{ matrix.os }}, ${{ matrix.bla_vendor}} BLA_VENDOR
    runs-on: ${{ matrix.os }}-latest
    strategy:
        fail-fast: false
        matrix:
            os:
              - 'ubuntu'
              - 'macos'
            python:
              - '3.8'
              - '3.11'
            bla_vendor: [ 'unset' ]
            include:
              - os: 'ubuntu'
                python: '3.11'
                bla_vendor: 'Generic'
              - os: 'ubuntu'
                python: '3.11'
                bla_vendor: 'OpenBLAS'
              - os: 'macos'
                python: '3.11'
                bla_vendor: 'Apple'
              - os: 'macos'
                python: '3.11'
                bla_vendor: 'Generic'
              - os: 'macos'
                python: '3.11'
                bla_vendor: 'OpenBLAS'

    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Checkout Slycot
        uses: actions/checkout@v3
        with:
          repository: python-control/Slycot
          fetch-depth: 0
          submodules: 'recursive'
      - name: Setup Ubuntu
        if: matrix.os == 'ubuntu'
        run: |
          sudo apt-get -y update
          sudo apt-get -y install gfortran cmake --fix-missing
          case ${{ matrix.bla_vendor }} in
            unset | Generic )  sudo apt-get -y install libblas-dev liblapack-dev ;;
            OpenBLAS        ) sudo apt-get -y install libopenblas-dev ;;
            *)
              echo "bla_vendor option ${{ matrix.bla_vendor }} not supported"
              exit 1 ;;
          esac
      - name: Setup macOS
        if: matrix.os == 'macos'
        run: |
          case ${{ matrix.bla_vendor }} in
            unset | Generic | Apple ) ;; # Found in system
            OpenBLAS )
              brew install openblas
              echo "BLAS_ROOT=/usr/local/opt/openblas/" >> $GITHUB_ENV
              echo "LAPACK_ROOT=/usr/local/opt/openblas/" >> $GITHUB_ENV
              ;;
            *)
              echo "bla_vendor option ${{ matrix.bla_vendor }} not supported"
              exit 1 ;;
          esac
          echo "FC=gfortran-11" >> $GITHUB_ENV
      - name: Build wheel
        env:
          BLA_VENDOR: ${{ matrix.bla_vendor }}
          CMAKE_GENERATOR: Unix Makefiles
        run: |
          if [[ $BLA_VENDOR = unset ]]; then unset BLA_VENDOR; fi
          python -m pip install --upgrade pip
          pip wheel -v -w . .
          wheeldir=slycot-wheels/${{ matrix.os }}-${{ matrix.python }}-${{ matrix.bla_vendor }}
          mkdir -p ${wheeldir}
          cp ./slycot*.whl ${wheeldir}/
      - name: Save wheel
        uses: actions/upload-artifact@v3
        with:
          name: slycot-wheels
          path: slycot-wheels


  create-wheel-test-matrix:
    name: Create wheel test matrix
    runs-on: ubuntu-latest
    needs: build-pip
    if: always()  # run tests for all successful builds, even if others failed
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout python-control
        uses: actions/checkout@v3
      - name: Download wheels (if any)
        uses: actions/download-artifact@v3
        with:
          name: slycot-wheels
          path: slycot-wheels
      - id: set-matrix
        run: echo "matrix=$(python3 .github/scripts/set-pip-test-matrix.py)" >> $GITHUB_OUTPUT


  test-wheel:
    name: Test wheel ${{ matrix.packagekey }}, ${{matrix.blas_lib}} BLAS lib ${{ matrix.failok }}
    needs: create-wheel-test-matrix
    runs-on: ${{ matrix.os }}-latest
    continue-on-error: ${{ matrix.failok == 'FAILOK' }}

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.create-wheel-test-matrix.outputs.matrix) }}

    steps:
      - name: Checkout Slycot
        uses: actions/checkout@v3
        with:
          repository: 'python-control/Slycot'
          path: slycot-src
      - name: Checkout python-control
        uses: actions/checkout@v3
        with:
          repository: 'python-control/python-control'
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Setup Ubuntu
        if: matrix.os == 'ubuntu'
        run: |
          set -xe
          sudo apt-get -y update
          case ${{ matrix.blas_lib }} in
            Generic )  sudo apt-get -y install libblas3 liblapack3 ;;
            unset | OpenBLAS        ) sudo apt-get -y install libopenblas-base ;;
            *)
              echo "BLAS ${{ matrix.blas_lib }} not supported for wheels on Ubuntu"
              exit 1 ;;
          esac
          update-alternatives --display libblas.so.3-x86_64-linux-gnu
          update-alternatives --display liblapack.so.3-x86_64-linux-gnu
      - name: Setup macOS
        if: matrix.os == 'macos'
        run: |
          set -xe
          brew install coreutils
          case ${{ matrix.blas_lib }} in
            unset | Generic | Apple ) ;; # system provided (Uses Apple Accelerate Framework)
            OpenBLAS )
              brew install openblas
              echo "DYLIB_LIBRARY_PATH=/usr/local/opt/openblas/lib" >> $GITHUB_ENV
              ;;
            *)
              echo "BLAS option ${{ matrix.blas_lib }} not supported for wheels on MacOS"
              exit 1 ;;
          esac
      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          name: slycot-wheels
          path: slycot-wheels
      - name: Install Wheel
        run: |
          python -m pip install --upgrade pip
          pip install matplotlib scipy pytest pytest-cov pytest-timeout coverage coveralls
          pip install slycot-wheels/${{ matrix.packagekey }}/slycot*.whl
          pip show slycot
      - name: Test with pytest
        run: pytest -v control/tests
